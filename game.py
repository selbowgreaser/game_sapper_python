import os
import pickle
import random as rand
from collections import deque

from config import *


class Minefield:
    def __init__(self, size, bombs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è

        :param size: list or tuple —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :param bombs: int –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –Ω–∞ –ø–æ–ª–µ
        """
        self.size = size
        self.bombs = bombs
        self.minefield = [[' ' for _ in range(self.size[1])] for _ in range(self.size[0])]
        self.playing_field = [['‚ñ†' for _ in self.minefield[0]] for _ in self.minefield]
        self.queue_coord = deque()
        self.bombs_generated = False
        self.flags = 0

    def gen_neighbors(self, x, y):
        """
        Generating a list containing the values of neighboring cells

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :return: list –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
        """
        neighbors = []
        for delta_1 in [-1, 0, 1]:
            for delta_2 in [-1, 0, 1]:
                x_new, y_new = x + delta_1, y + delta_2
                if 0 <= x_new <= self.size[0] - 1 and 0 <= y_new <= self.size[1] - 1 and (not delta_1 == delta_2 == 0):
                    neighbors.append(self.minefield[x_new][y_new])
        return neighbors

    def gen_coord_neighbors(self, x, y):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :return: list —Å–ø–∏—Å–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
        """
        coord_neighbors = []
        for delta_1 in [-1, 0, 1]:
            for delta_2 in [-1, 0, 1]:
                x_new = x + delta_1
                y_new = y + delta_2
                if 0 <= x_new <= self.size[0] - 1 and 0 <= y_new <= self.size[1] - 1 and (not delta_1 == delta_2 == 0):
                    coord_neighbors.append([x_new, y_new])
        return coord_neighbors

    def check_neighbors(self, x, y):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∏–Ω –≤ –Ω–∏—Ö –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö. –ï—Å–ª–∏ –≤ —Å–æ—Å–µ–¥–Ω–µ–π —è—á–µ–π–∫–µ –µ—Å—Ç—å –º–∏–Ω–∞, –≤ —è—á–µ–π–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –Ω–µ–µ, –µ–µ —Å–æ—Å–µ–¥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è.

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :return: None
        """
        neighbors = self.gen_neighbors(x, y)
        if 'üí£' in neighbors:
            self.playing_field[x][y] = neighbors.count('üí£')
        else:
            self.playing_field[x][y] = ' '
            coord_neighbors = self.gen_coord_neighbors(x, y)
            self.queue_coord += deque(coord_neighbors)

    def set_bombs(self, x, y):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω –Ω–∞ –ø–æ–ª–µ. –ü–µ—Ä–≤—ã–º —Ö–æ–¥–æ–º –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ –∏ –µ–µ —Å–æ—Å–µ–¥—è—Ö –º–∏–Ω—ã
        –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è.

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :return: None
        """
        for _ in range(self.bombs):
            while True:
                xb = rand.randint(0, self.size[0] - 1)
                yb = rand.randint(0, self.size[1] - 1)
                if self.minefield[xb][yb] == 'üí£' or (x == xb and y == yb) or [xb, yb] in self.gen_coord_neighbors(x, y):
                    continue
                self.minefield[xb][yb] = 'üí£'
                break

    def set_flags(self, x, y):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ 'F' –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :return: None
        """
        if self.playing_field[x][y] == 'F':
            self.playing_field[x][y] = '‚ñ†'
            self.flags -= 1
        elif self.playing_field[x][y] == '‚ñ†':
            self.playing_field[x][y] = 'F'
            self.flags += 1
        else:
            print(UserText.CANNOT_FLAG)

    def get_playing_field(self):
        """
        –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å

        :return: None
        """
        print(f'–ú–ò–ù –ù–ê –ü–û–õ–ï: {self.bombs}', end='')
        for line in self.playing_field:
            print(f'\n-{"----" * len(line)}\n| ', end='')
            for cell in line:
                print(cell, sep=' | ', end=' | ')
        print(f'\n-{"----" * len(line)}')

    def get_minefield(self):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

        :return: None
        """
        print('–ú–ò–ù–ù–û–ï –ü–û–õ–ï', end='')
        for line in self.minefield:
            print(f'\n-{"----" * len(line)}\n| ', end='')
            for cell in line:
                print(cell, sep=' | ', end=' | ')
        print(f'\n-{"----" * len(line)}')

    def do_act(self, x, y, action):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–π–∫–∏ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –≤ –∑–∞–¥–∞–Ω–Ω—É—é —è—á–µ–π–∫—É. –ú–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å
        –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–∏ –∏–ª–∏ —è—á–µ–π–∫–∏ —Å —Ñ–ª–∞–≥–æ–º. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω—É,
        –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ä–∞–∂–µ–Ω–∏—è.

        :param x: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        :param y: int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        :param action: str —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        :return: func or ValueError or None
        """
        if action == Action.FLAG:
            self.set_flags(x, y)

        elif action == Action.OPEN and self.minefield[x][y] == 'üí£':
            return Game().lose_game()

        elif self.minefield[x][y].isdigit() or self.minefield[x][y] == Action.FLAG:
            raise ValueError

        elif action == Action.OPEN:
            self.queue_coord.append([x, y])
            while self.queue_coord:
                x, y = self.queue_coord.popleft()
                if self.playing_field[x][y] == '‚ñ†':
                    self.check_neighbors(x, y)


class Game:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä—ã
        """
        self.minefield = None
        self.isPlay = True

    def start(self):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã

        :return: func
        """
        print(UserText.WELCOME)

        command = self.handler_message(input(UserText.HOW_START_GAME), Context.START_MENU)
        if command == Start.START_NEW_GAME:
            return self.new_game()
        if command == Start.LOAD_GAME:
            return self.load_game()
        if command == Start.EXIT:
            return exit()

    def new_game(self):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è

        :return: func
        """
        command = self.handler_message(input(UserText.SELECT_FIELD), Context.SELECT_FIELD)

        if command == FieldSize.STANDARD:
            self.minefield = Minefield((5, 5), rand.randint(2, 5))
        elif command == FieldSize.CUSTOM:
            line, column, bombs = self.handler_message(input(UserText.CHOOSE_SIZES), Context.CHOOSE_SIZES)
            self.minefield = Minefield((line, column), bombs)
        elif command == FieldSize.BACK:
            return self.start()

        print(UserText.START_GAME)
        return self.first_action()

    def load_game(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pkl, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pickle

        :return: func
        """
        if not list(filter(lambda x: x[:4] == "save", os.listdir())):
            print(UserText.NO_SAVE)
            if self.minefield is None:
                print(UserText.WILL_BE_CREATED)
                self.new_game()
            else:
                self.action()
        print(UserText.SELECT_SAVE)
        for save in filter(lambda x: x[:4] == "save", os.listdir()):
            print(save)
        with open(f'save{self.handler_message(input(), Context.SELECT_SAVE)}.pkl', 'rb') as save:
            try:
                self.minefield = pickle.load(save)
                self.minefield.get_playing_field()
                return self.action()
            except:
                print(UserText.ERROR)
                return self.load_game()

    def save_game(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pkl, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pickle.
        –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ.

        :return: func
        """
        if len(list(filter(lambda x: x[:4] == "save", os.listdir()))):
            number_of_save = max([int(save[4]) for save in filter(lambda x: x[:4] == "save", os.listdir())]) + 1
        else:
            number_of_save = 1
        with open(f'save{number_of_save}.pkl', 'wb') as save:
            pickle.dump(self.minefield, save)
            print(UserText.GAME_SAVED)
            return self.menu()

    def first_action(self):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â—É—é –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ

        :return: func
        """
        self.minefield.get_playing_field()

        action = self.handler_message(input(UserText.ENTER_MOVE), Context.PLAYER_TURN)
        if action == '–ú–µ–Ω—é':
            return self.menu()
        X, Y, Action = action

        self.minefield.set_bombs(X - 1, Y - 1)
        self.minefield.bombs_generated = True
        self.minefield.do_act(X - 1, Y - 1, Action)
        self.minefield.get_playing_field()

        return self.action()

    def action(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä—Ç–∏—é –Ω–∞ –ø–æ–±–µ–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–±–µ–¥—ã –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

        :return: func
        """
        try:
            while self.is_win(self.minefield.playing_field) != 0:

                action = self.handler_message(input(UserText.ENTER_MOVE), Context.PLAYER_TURN)
                if action == Menu.MENU:
                    return self.menu()
                X, Y, Action = action
                self.minefield.do_act(X - 1, Y - 1, Action)
                self.minefield.get_playing_field()

            return self.win_game()

        except ValueError:
            print(UserText.ERROR)
            return self.action()

    def menu(self):
        """
        –ú–µ–Ω—é, –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∑–∞–≥—Ä—É–∑–∏—Ç—å, –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Ç–∏–∏

        :return: func
        """
        command = input(UserText.MENU)
        if command == Menu.CONTINUE:
            return self.action()
        if command == Menu.SAVE_GAME:
            if not self.minefield.bombs_generated:
                print(UserText.CANNOT_BE_SAVED)
                return self.menu()
            return self.save_game()
        if command == Menu.LOAD_GAME:
            return self.load_game()
        if command == Menu.START_NEW_GAME:
            return self.new_game()
        if command == Menu.EXIT:
            return exit()

    def is_win(self, field):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ –Ω–∞ —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã

        :param field: list of lists –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        :return: int –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
        """
        return sum([line.count('‚ñ†') for line in field]) - self.minefield.bombs + self.minefield.flags

    def win_game(self):
        """
        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç —Å –ø–æ–±–µ–¥–æ–π

        :return: func
        """
        print(UserText.CONGRATULATIONS)
        return self.start()

    def lose_game(self):
        """
        –°–æ–æ–±—â–∞–µ—Ç –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏

        :return: func
        """
        print(UserText.DEFEAT)
        return self.start()

    def handler_message(self, string, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :param string: str —Å—Ç—Ä–æ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        :param context: str –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        :return: str
        """
        if context in (Context.START_MENU, Context.SELECT_FIELD):
            while True:
                if string in ['1', '2', '3']:
                    return string
                else:
                    string = input(UserText.ERROR)

        if context == Context.CHOOSE_SIZES:
            while True:
                try:
                    sizes = [int(size) for size in string.split()]
                    if 5 <= sizes[0] <= 30 and 5 <= sizes[1] <= 30 and 0 < sizes[2] < sizes[0] * sizes[1]:
                        return sizes
                    else:
                        string = input(UserText.ERROR)
                except ValueError or IndexError:
                    string = input(UserText.ERROR)

        if context == Context.PLAYER_TURN:
            while True:
                try:
                    if string == '–ú–µ–Ω—é':
                        return string
                    turn = string.replace(' ', '').split(',')
                    turn[0], turn[1], turn[2] = int(turn[0]), int(turn[1]), turn[2].upper()
                    if 1 <= turn[0] <= self.minefield.size[0] and 1 <= turn[1] <= self.minefield.size[1]\
                            and turn[2] in ['F', 'O']:
                        return turn
                    else:
                        string = input(UserText.ERROR)
                except ValueError or IndexError:
                    string = input(UserText.ERROR)

        if context == Context.SELECT_SAVE:
            while True:
                try:
                    saves = list(filter(lambda x: x[:4] == "save", os.listdir()))
                    number_of_saves = [save[4] for save in saves]
                    if string in number_of_saves:
                        return string
                    else:
                        string = input(UserText.ERROR)

                except ValueError:
                    string = input(UserText.ERROR)
